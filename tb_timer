/********1*********2*********3*********4*********5*********6*********7*********8
* File : tb_timer.v
*_______________________________________________________________________________
*
* Revision history
*
* Name          Date        Observations
* ------------------------------------------------------------------------------
* -            13/03/2024   First version.
* ------------------------------------------------------------------------------
*_______________________________________________________________________________
*
* Description
* Testbench for a timer.
*_______________________________________________________________________________

*
*********1*********2*********3*********4*********5*********6*********7*********/
`include "../misc/timescale.v"
// delay between clock posedge and check
`define DELAY 2
// verification level: RTL_LVL GATE_LVL
`define RTL_LVL

module tb_timer();
//___________________________________________________________________________
//input output signals for the ¿DUT?
    parameter SIZE = 8; // data size of the shift register
    reg clk;            // rellotge del sistema
    reg rst_n;          // reset del sistema asíncorn i actiu nivell baix
    reg [SIZE-1:0]ticks; // tamany del contador
    reg start;          // inici comptador regresiu
    reg stop;           // atura el comptador
    reg out;           // sortida del temporitzador (1 quan s'inicia el comptador i 0 en la resta)

//test signals
    integer errors;
    reg [SIZE-1:0] ticksvalue; //
    reg [SIZE-1:0] vExpected;
    reg [SIZE-1:0] vObteined;
    reg [SIZE-1:0] wait_state; //num de cicles que es para el temporitzador durant el comptatge
_________________________________
// Instantiation of the module to be verified
  `ifdef RTL_LVL
  tb_timer #(.SIZE(8)) DUT(
  `else
  tb_timer DUT( // used by post-síntesis verification
  `endif
    .Clk           (clk),
    .Rst_n         (rst_n),
    .Ticks          (ticks),
    .Start          (start),
    .Stop           (stop),
    
    // TO BE COMPLETED BY STUDENT
  );

 //___________________________________________________________________________
  // 100 MHz clock generation
  initial clk = 1'b0;
  always #5 clk = ~ clk;

   //___________________________________________________________________________
  // signals and vars initialization
  initial begin
    rst_n  = 1'b1;
    start  = 1'b1;
    stop   = 1'b0;
    ticks = {SIZE{1'b0}};
    Out  = 1'b0;
  end

  //___________________________________________________________________________
  // Test Vectors



  //___________________________________________________________________________
  // Test tasks
   task check_elapsed_time; //comprova el temps entre dos polsos de sortida
    input out;
    begin
      out0Cntr = {SIZE{1'b0}}; //comptador de vegades que la sortida és 0
      always @(posedge clk) begin //per cada flanc de rellotge
        if (out) begin //si out = 1, tenim 1 pols de sortida
          pulses_clk <= out0Cntr; //emmagatzemem el numero de polsos del clk que hi han entre polsos de sortida
          out0Cntr <= 0; //resetejem el valor del comptador de sortida = 0
          $display("[Info- %t] ", $time); //falta convertir los valores tiempo
        end
        else begin //si out = 0
          out0Cntr <= out0Cntr + 1; //aumentem el valor del comptador del numero de polsos del clk
        end
      end
      vExpected = ticks + 1; //valor esperat és ticks + el pols del clk que carrega el valor de ticks al comptador
      vObtained = pulses_clk; //valor obtingut és el numero de polsos del clk entre polsos de sortida
      async_check; //comprovació asíncrona
      wait_cycles(1); //cicles de espera
    end
   endtask
  
  //___________________________________________________________________________
  // Basic tasks

  task reset;
    // generation of reset pulse
    begin
      $display("[Info- %t] Reset", $time);
      rst_n = 1'b0;
      wait_cycles(3);
      rst_n = 1'b1;
    end
  endtask

  task wait_cycles;
    // wait for N clock cycles
    input [32-1:0] Ncycles;
    begin
      repeat(Ncycles) begin
        @(posedge clk);
          #`DELAY;
      end
    end
  endtask

  task sync_check;
    // synchronous output check
    begin
      wait_cycles(1);
      if (vExpected != vObtained) begin
        $display("[Error! %t] The value is %h and should be %h", $time, vObtained, vExpected);
        errors = errors + 1;
      end else begin
        $display("[Info- %t] Successful check at time", $time);
      end
    end
  endtask

  task async_check;
    // asynchronous output check
    begin
      #`DELAY;
      if (vExpected != vObtained) begin
        $display("[Error! %t] The value is %h and should be %h", $time, vObtained, vExpected);
        errors = errors + 1;
      end else begin
        $display("[Info- %t] Successful check at time", $time);
      end
    end
  endtask

  task check_errors;
    // check for errors during the simulation
    begin
      if (errors==0) begin
        $display("********** TEST PASSED **********");
      end else begin
        $display("********** TEST FAILED **********");
      end
    end
  endtask

endmodule
